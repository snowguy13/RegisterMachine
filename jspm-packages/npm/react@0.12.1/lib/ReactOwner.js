/* */
"format cjs";!function(e){"use strict";var t=require("./emptyObject"),n=require("./invariant"),r={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(t,o,a){"production"!==e.env.NODE_ENV?n(r.isValidOwner(a),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):n(r.isValidOwner(a)),a.attachRef(o,t)},removeComponentAsRefFrom:function(t,o,a){"production"!==e.env.NODE_ENV?n(r.isValidOwner(a),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):n(r.isValidOwner(a)),a.refs[o]===t&&a.detachRef(o)},Mixin:{construct:function(){this.refs=t},attachRef:function(r,o){"production"!==e.env.NODE_ENV?n(o.isOwnedBy(this),"attachRef(%s, ...): Only a component's owner can store a ref to it.",r):n(o.isOwnedBy(this));var a=this.refs===t?this.refs={}:this.refs;a[r]=o},detachRef:function(e){delete this.refs[e]}}};module.exports=r}(require("github:jspm/nodelibs@0.0.3/process"));
//# sourceMappingURL=ReactOwner.js.map