/* */
"format cjs";"use strict";function updateWithPendingValueIfMounted(){this.isMounted()&&(this.setState({value:this._pendingValue}),this._pendingValue=0)}function selectValueType(e,t){if(null!=e[t])if(e.multiple){if(!Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function updateOptions(e,t){var n,r,o,a=e.props.multiple,i=null!=t?t:e.state.value,s=e.getDOMNode().options;if(a)for(n={},r=0,o=i.length;o>r;++r)n[""+i[r]]=!0;else n=""+i;for(r=0,o=s.length;o>r;r++){var u=a?n.hasOwnProperty(s[r].value):s[r].value===n;u!==s[r].selected&&(s[r].selected=u)}}var AutoFocusMixin=require("./AutoFocusMixin"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactCompositeComponent=require("./ReactCompositeComponent"),ReactElement=require("./ReactElement"),ReactDOM=require("./ReactDOM"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),select=ReactElement.createFactory(ReactDOM.select.type),ReactDOMSelect=ReactCompositeComponent.createClass({displayName:"ReactDOMSelect",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],propTypes:{defaultValue:selectValueType,value:selectValueType},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillMount:function(){this._pendingValue=null},componentWillReceiveProps:function(e){!this.props.multiple&&e.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!e.multiple&&this.setState({value:this.state.value[0]})},render:function(){var e=assign({},this.props);return e.onChange=this._handleChange,e.value=null,select(e,this.props.children)},componentDidMount:function(){updateOptions(this,LinkedValueUtils.getValue(this))},componentDidUpdate:function(e){var t=LinkedValueUtils.getValue(this),n=!!e.multiple,r=!!this.props.multiple;(null!=t||n!==r)&&updateOptions(this,t)},_handleChange:function(e){var t,n=LinkedValueUtils.getOnChange(this);n&&(t=n.call(this,e));var r;if(this.props.multiple){r=[];for(var o=e.target.options,a=0,i=o.length;i>a;a++)o[a].selected&&r.push(o[a].value)}else r=e.target.value;return this._pendingValue=r,ReactUpdates.asap(updateWithPendingValueIfMounted,this),t}});module.exports=ReactDOMSelect;
//# sourceMappingURL=ReactDOMSelect.js.map